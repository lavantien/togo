// Code generated by sqlc. DO NOT EDIT.
// source: task.sql

package db

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO
    tasks (owner, content, quantity)
VALUES ($1, $2, $3) RETURNING id, owner, content, quantity, created_at
`

type CreateTaskParams struct {
	Owner    string `json:"owner"`
	Content  string `json:"content"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Owner, arg.Content, arg.Quantity)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Content,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT
    id, owner, content, quantity, created_at
FROM
    tasks
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Content,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const listTasksByOwner = `-- name: ListTasksByOwner :many
SELECT
    id, owner, content, quantity, created_at
FROM
    tasks
WHERE
    owner = $3
ORDER BY
    id
LIMIT
    $1
OFFSET
    $2
`

type ListTasksByOwnerParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Owner  string `json:"owner"`
}

func (q *Queries) ListTasksByOwner(ctx context.Context, arg ListTasksByOwnerParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByOwner, arg.Limit, arg.Offset, arg.Owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Content,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
